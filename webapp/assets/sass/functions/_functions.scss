@function gcd($a, $b) {
    // From: http://rosettacode.org/wiki/Greatest_common_divisor#JavaScript
    @if $b != 0 {
        @return gcd($b, $a % $b);
    }
    @else {
        @return abs($a);
    }
}

@function pow($base, $exponent, $prec: 12) {
    // Handles decimal exponents by trying to convert them into a fraction and then use a nthRoot-algorithm for parts of the calculation
    @if floor($exponent) != $exponent {
        $prec2: pow(10, $prec);
        $exponent: round($exponent * $prec2);
        $denominator: gcd($exponent, $prec2);
        @return nthRoot(pow($base, $exponent / $denominator), $prec2 / $denominator, $prec);
    }
    $value: $base;
    @if $exponent > 1 {
        @for $i from 2 through $exponent {
            $value: $value * $base;
        }
    }
    @else if $exponent < 1 {
        @for $i from 0 through -$exponent {
            $value: $value / $base;
        }
    }
    @return $value;
}

@function nthRoot($num, $n: 2, $prec: 12) {
    // From: http://rosettacode.org/wiki/Nth_root#JavaScript
    $x: 1;
    @for $i from 0 through $prec {
        $x: 1 / $n * (($n - 1) * $x + $num / pow($x, $n - 1));
    }
    @return $x;
}

@function luma($color) {
    // Thanks voxpelli for a very concise implementation of luminance measure in sass
    // Adapted from: https://gist.github.com/voxpelli/6304812
    $rgba: red($color), green($color), blue($color);
    $rgba2: ();
    @for $i from 1 through 3 {
        $rgb: nth($rgba, $i);
        $rgb: $rgb / 255;
        $rgb: if($rgb < 0.03928, $rgb / 12.92, pow(($rgb + 0.055) / 1.055, 2.4));
        $rgba2: append($rgba2, $rgb);
    }
    @return (0.2126 * nth($rgba2, 1) + 0.7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3)) * 100;
}

@function contrast_ratio($color1, $color2) {
    $luma1: luma($color1) + 5;
    $luma2: luma($color2) + 5;
    $ratio: $luma1 / $luma2;
    @if $luma1 < $luma2 {
        $ratio: 1 / $ratio;
    }
    @return $ratio;
}

@function text-contrast($bgcolor, $preferred-color: $bgcolor, $threshold: 4.5) {
    // threshold 4.5 = WCAG AA,7= WCAG AAA
    $list: 10 20 30 40 50 60 70 80 90 100;
    @each $percent in $list {
        $lighter: lighten($preferred-color, $percent);
        $darker: darken($preferred-color, $percent);
        $darker-ratio: contrast_ratio($bgcolor, $darker);
        $lighter-ratio: contrast_ratio($bgcolor, $lighter);
        @if $lighter-ratio > $darker-ratio {
            @if $lighter-ratio > $threshold {
                @return $lighter;
            }
        }
        @if $darker-ratio > $lighter-ratio {
            @if $darker-ratio > $threshold {
                @return $darker;
            }
        }
    }
    @return if(lightness($preferred-color) < 51, #FFF, #000);
}

@function text-color($bgcolor, $constrast-ratio: 4.5) {
    $constrast: contrast_ratio($bgcolor, black);
    @if $constrast > $constrast-ratio {
        @return black;
    }
    @else {
        @return white;
    }
}

/// Stroke font-character
/// @param  {Integer} $stroke - Stroke width
/// @param  {Color}   $color  - Stroke color
/// @return {List}            - text-shadow list
@function stroke($stroke, $color) {
    $shadow: ();
    $from: $stroke * -1;
    @for $i from $from through $stroke {
        @for $j from $from through $stroke {
            $shadow: append($shadow, $i * 1px $j * 1px 0 $color, comma);
        }
    }
    @return $shadow;
}

/// Stroke font-character
/// @param  {Integer} $stroke - Stroke width
/// @param  {Color}   $color  - Stroke color
/// @return {Style}           - text-shadow
@mixin stroke($stroke, $color) {
    text-shadow: stroke($stroke, $color);
}

@function pi() {
    @return 3.14159;
}

@function rad($angle) {
    $unit: unit($angle);
    $unitless: $angle / ($angle * 0 + 1);
    // If the angle has 'deg' as unit, convert to radians.
    @if $unit == deg {
        $unitless: $unitless / 180 * pi();
    }
    @return $unitless;
}

@function sin($angle) {
    $sin: 0;
    $angle: rad($angle);
    // Iterate a bunch of times.
    @for $i from 0 through 10 {
        $sin: $sin + pow(-1, $i) * pow($angle, 2 * $i + 1) / fact(2 * $i + 1);
    }
    @return $sin;
}

@function cos($angle) {
    $cos: 0;
    $angle: rad($angle);
    // Iterate a bunch of times.
    @for $i from 0 through 10 {
        $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
    }
    @return $cos;
}

@function tan($angle) {
    @return sin($angle) / cos($angle);
}